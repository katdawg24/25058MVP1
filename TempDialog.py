# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'TempDialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import math
from random import randint
from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import pyqtgraph as pg
from PyQt5.QtGui import QStandardItem, QStandardItemModel
import pandas as pd
from PyQt5.QtCore import pyqtSignal


class Ui_TempDetails(object):
    

    def setupUi(self, TempDetails, df, mainWindow):
        self.main_window = mainWindow
        TempDetails.setObjectName("TempDetails")
        TempDetails.resize(1050, 600)

        self.temp_dialog_close_button = QtWidgets.QPushButton(TempDetails)
        self.temp_dialog_close_button.setGeometry(QtCore.QRect(890, 500, 121, 31))
        self.temp_dialog_close_button.setObjectName("temp_dialog_close_button")
        self.temp_dialog_close_button.clicked.connect(self.closeWindow)

        self.cutoff_value_label = QtWidgets.QLabel(TempDetails)
        self.cutoff_value_label.setGeometry(QtCore.QRect(70, 420, 170, 51))
        self.cutoff_value_label.setObjectName("cutoff_value_label")
        self.cutoff_value_label.setText("Enter cutoff value:")

        self.cutoff_input = QtWidgets.QLineEdit(TempDetails)
        self.cutoff_input.setValidator(QtGui.QDoubleValidator(0.0,99.99,2))
        self.cutoff_input.setText("35.00")
        self.cutoff_input.setGeometry(QtCore.QRect(70, 480, 250, 50))
        self.cutoff_input.setObjectName("cutoff_input")
        
        self.cutoff_input_button = QtWidgets.QPushButton(TempDetails)
        self.cutoff_input_button.setGeometry(QtCore.QRect(500, 480, 200, 50))
        self.cutoff_input_button.setObjectName("cutoff_input_button")
        self.cutoff_input_button.clicked.connect(self.new_cutoff_value)

        self.tableView = QtWidgets.QTableWidget(TempDetails)
        self.tableView.setGeometry(QtCore.QRect(770, 20, 255, 380))
        self.tableView.setObjectName("temp_table")
        self.last_time = 0
        self.tableView.setColumnCount(2)
        self.tableView.setHorizontalHeaderLabels(["Time (s)", "Temp (C)"])
        # Create a model for the table
        # self.table_model = QStandardItemModel()
        # self.table_model.setHorizontalHeaderLabels(["Time", "Temperature"])
        # self.tableView.setModel(self.table_model)

        self.detailed_temp_chart = pg.PlotWidget(TempDetails)
        self.detailed_temp_chart.setBackground("w")
        pen = pg.mkPen(color=(255,0,0))
        self.detailed_temp_chart.setTitle("Temperature vs Time", color="k", size="15pt")
        styles = {"color": "red", "font-size": "10px"}
        self.detailed_temp_chart.setLabel("left", "Temperature (°C)", **styles)
        self.detailed_temp_chart.setLabel("bottom", "Time (min)", **styles)
        #self.detailed_temp_chart.addLegend()
        self.detailed_temp_chart.showGrid(x=True, y=True)
        self.detailed_temp_chart.setYRange(24, 32)
        self.time = df['Time'].tolist()
        self.temperature = df['Temp'].tolist()
        
        self.temp_line = self.detailed_temp_chart.plot(
            self.time,
            self.temperature,
            name="Temperature Sensor",
            pen=pen
        )

        for index, row in df.iterrows():
            self.tableView.setRowCount(self.tableView.rowCount() + 1)
            self.tableView.setItem(self.tableView.rowCount() - 1, 0, QtWidgets.QTableWidgetItem(str(row['Time'])))
            self.tableView.setItem(self.tableView.rowCount() - 1, 1, QtWidgets.QTableWidgetItem(str(row['Temp'])))

        # self.detailed_temp_chart = QtWidgets.QScrollArea(TempDetails)
        self.detailed_temp_chart.setGeometry(QtCore.QRect(20, 20, 720, 380))
        # self.detailed_temp_chart.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        # self.detailed_temp_chart.setWidgetResizable(True)
        self.detailed_temp_chart.setObjectName("detailed_temp_chart")

        # self.scrollAreaWidgetContents = QtWidgets.QWidget()
        # self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 699, 349))
        # self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        # self.detailed_temp_chart.setWidget(self.scrollAreaWidgetContents)

        self.retranslateUi(TempDetails)
        QtCore.QMetaObject.connectSlotsByName(TempDetails)

    def retranslateUi(self, TempDetails):
        _translate = QtCore.QCoreApplication.translate
        TempDetails.setWindowTitle(_translate("TempDetails", "Dialog"))
        self.temp_dialog_close_button.setText(_translate("TempDetails", "Close"))
        self.cutoff_input_button.setText(_translate("TempDetails", "Change Cutoff"))
        self.cutoff_input.setText(_translate("TempDetails", str(self.main_window.getCutoffValues()[0])))


    def closeWindow(self):
        self.TempDetails.hide()

    def __init__(self, df, main_window):
        super().__init__()
        self.TempDetails = QtWidgets.QDialog()
        self.setupUi(self.TempDetails, df, main_window)
        
        self.TempDetails.show()

    def update_chart_data(self, data):
        #Move least recent reading off graph
        if (len(self.time) > 9):
            self.time = self.time[1:]
            self.temperature = self.temperature[1:]

        self.time.append(data[0])
        self.temperature.append(data[1])

        #Redraw line
        self.temp_line.setData(self.time, self.temperature)

        
        # if (math.floor(data[0]) - math.floor(self.last_time) > 0):
        self.update_table_data(data[0], data[1])
            
        self.last_time = data[0]
        
        #self.temp_display.display(self.temperature[-1])

    def update_table_data(self, time, temp):
        self.tableView.setRowCount(self.tableView.rowCount() + 1)
        self.tableView.setItem(self.tableView.rowCount() - 1, 0, QtWidgets.QTableWidgetItem(str(time)))
        self.tableView.setItem(self.tableView.rowCount() - 1, 1, QtWidgets.QTableWidgetItem(str(temp)))

    def update_table(self, data):
        # Add the most recent data to the table
        if len(data) == 2:  # Check that data contains 2 fields [time, temperature]
            time, temperature = data
            time_item = QStandardItem(str(time))
            temperature_item = QStandardItem(f"{temperature:.2f}°C")

            # Insert the new row at the top
            self.table_model.insertRow(0, [time_item, temperature_item])

            # limit the number of rows displayed
            if self.table_model.rowCount() > 20:
                self.table_model.removeRow(self.table_model.rowCount() - 1)

    def new_cutoff_value(self):
        self.main_window.setTempCutoffValue(self.cutoff_input.text())
    

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    TempDetails = QtWidgets.QDialog()
    emptydf = pd.DataFrame(columns= ["Time", "Temp", "Distance"])
    ui = Ui_TempDetails(emptydf)
    


    sys.exit(app.exec_())